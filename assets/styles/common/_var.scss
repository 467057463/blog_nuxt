@use 'sass:map';
@use 'sass:color';
@use 'sass:math';
@use './mixin' as *;

$colors: ()!default;
$colors: map.deep-merge(
  (
    'white': #ffffff,
    'black': #000000,
    'brand': #1890ff,
    'brand-sub': #ff4800,
  ),
  $colors
);

// 生成灰度色
$color-white: map.get($colors, 'white') !default;
$color-black: map.get($colors, 'black') !default;

@mixin set-color-mix-level(
  $base-color: $color-white,
  $number: 1,
  $mode: 'gray',
  $mix-color: $color-black
){
  $colors: map.deep-merge(
    (
      '#{$mode}-#{$number}': color.mix(
        $mix-color,
        $base-color,
        math.percentage(math.div($number, 10))
      )
    ),
    $colors
  ) !global;
}

@for $i from 1 through 9 {
  @include set-color-mix-level($color-white, $i)
}


// 把基色中的彩色生成四个亮度值
$color-types: brand, brand-sub;
$color-light-map: (
  'light': 1,
  'lighter': 2,
  'bright': 3,
  'dark': -1,
  'darker': -2,
);

@mixin set-color-light-level(
  $base-color,
  $light-name,
  $level,
){
  $colors: map.deep-merge(
    (
      '#{$base-color}-#{$light-name}': color.scale(
        map.get($colors, $base-color),
        $lightness: math.percentage(math.div($level, 10))
      )
    ),
    $colors
  ) !global;
}

@each $type in $color-types {
  @each $light-name, $level in $color-light-map{
    @include set-color-light-level($type, $light-name, $level)
  }
}


// 背景颜色
$bg-color: () !default;
$bg-color: map.deep-merge(
  (
    'page': getCssVar('color', 'white'),
    'overlay': getCssVar('color', 'gray-1')
  ),
  $bg-color
);




