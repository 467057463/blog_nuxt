@use 'config';
@use 'sass:map';
@use 'sass:string';
@use 'sass:list';
@use 'sass:selector';

@function joinVarName($list...) {
  $name: '--' + config.$namespace;
  @each $item in $list {
    @if $item != '' {
      $name: $name + '-' + $item;
    }
  }
  @return $name;
}

@function getCssVar($args...){
  @return var(#{joinVarName($args...)});
}

@function getCssVarName($args...) {
  @return joinVarName($args);
}

@mixin set-css-var-value($name, $value, $prefix: 'color') {
  #{joinVarName($prefix, $name)}: $value;
}

@mixin insert-css-var($var-map, $prefix: 'color'){
  @each $name, $value in $var-map {
    #{joinVarName($prefix, $name)}: $value;
  }
}



$theme-list: light, dark;

@function listSlice($list, $index){
  $result: ();
  $start: if($index < 0, list.length($list) + $index + 1, $index);
  @for $i from $start through list.length($list) {
    $result: list.append($result, list.nth($list, $i))
  }
  @return $result;
};

@function formEntries($list){
  $result: ();
  @for $i from 1 through list.length($list){
    $result: map.deep-merge(
      (
        #{list.nth(list.nth($list, $i), 1)}: list.nth(list.nth($list, $i), 2)
      ),
      $result
    )
  }
  @return $result;
};

@function g($color){
  $split-list: string.split($color, '--');
  $color-list: listSlice($split-list, -2);
  $result: ();
  @for $i from 1 through list.length($theme-list) {
    $c: if(
      list.nth($color-list, $i), 
      list.nth($color-list, $i), 
      list.nth($color-list, 1)
    );
    $result: map.deep-merge(
      (
        #{list.nth($theme-list, $i)}: getCssVar('color', $c)
      ),
      $result
    );
  }
  @return $result;
};

// 生成主题颜色
@function generate-theme-color($type, $list){
  $result-list: ();
  @each $item in $list {
    $result-list: list.append($result-list, ($type + '--' + $item, g($item)))
  }
  @return formEntries($result-list)
};

// 插入主题色
@mixin insert-theme-css-var($color-map){
  @each $key, $value in $color-map {
    @each $theme in $theme-list{
      $selector: if($theme == light, ':root', selector.append(':root', '.'+$theme));
      @at-root #{$selector}{
        @include set-css-var-value($key, map.get($value, $theme) ,'' )
      }
    }
  }
}

@mixin set-component-css-var($name, $variables) {
  @each $attribute, $value in $variables {
    @if $attribute == 'default' {
      #{getCssVarName($name)}: #{$value};
    } @else {
      #{getCssVarName($name, $attribute)}: #{$value};
    }
  }
}